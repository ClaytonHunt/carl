# CARL Project Process Format Specification
# Version: 1.0  
# Purpose: Define the structure for project-specific process files (.carl/project/process.carl)

file_extension: ".carl"
file_path: ".carl/project/process.carl"
encoding: "UTF-8"
format: "YAML"

structure:
  header:
    required: true
    description: "Comment header with project identification and purpose"
    format: |
      # {Project Name} Development Process Definition
      # Generated by CARL Analysis v{version} on {timestamp}
      # Defines project-specific development workflow and standards

  project_identity:
    required: true
    description: "Basic project identification"
    fields:
      name:
        type: "string"
        description: "Project name"
      type:
        type: "string"
        examples: ["cli_tool", "web_service", "library", "mobile_app", "desktop_app"]
        description: "Type of project"
      language:
        type: "string" 
        description: "Primary programming language"
      framework:
        type: "string"
        description: "Primary framework or technology stack"
      version:
        type: "string"
        format: "semantic_version"
        description: "Current project version"

  development_workflow:
    required: true
    description: "Development methodology and workflow definition"
    fields:
      methodology:
        type: "string"
        enum: ["TDD", "BDD", "Agile", "Waterfall", "Kanban", "Custom"]
        description: "Primary development methodology"
      cycle:
        type: "array"
        description: "Development cycle phases"
        examples: [["red", "green", "refactor"], ["plan", "develop", "test", "deploy"]]
      branching_strategy:
        type: "string"
        enum: ["git_flow", "github_flow", "feature_branch", "trunk_based"]
        description: "Git branching strategy used"
      quality_gates:
        type: "array"
        description: "Quality gates that must pass before advancement"
        examples: ["all_tests_pass", "code_review_approved", "security_scan_clean"]

  quality_standards:
    required: true
    description: "Code quality and testing standards"
    fields:
      test_coverage_minimum:
        type: "integer"
        range: "0-100"
        description: "Minimum test coverage percentage required"
      code_quality_tools:
        type: "array"
        description: "Code quality tools and linters used"
        examples: ["eslint", "prettier", "shellcheck", "sonarqube"]
      review_requirements:
        type: "object"
        description: "Code review requirements"
        fields:
          required:
            type: "boolean"
            description: "Whether code reviews are required"
          min_reviewers:
            type: "integer"
            description: "Minimum number of reviewers required"
          reviewer_types:
            type: "array"
            description: "Types of reviewers required"
            examples: ["peer", "senior", "security", "architecture"]
      
  testing_strategy:
    required: true
    description: "Testing approach and requirements"
    fields:
      test_types:
        type: "array"
        description: "Types of tests used in the project"
        examples: ["unit", "integration", "end_to_end", "performance", "security"]
      test_frameworks:
        type: "array"
        description: "Testing frameworks and tools used"
      automation_level:
        type: "string"
        enum: ["full", "partial", "minimal", "manual"]
        description: "Level of test automation"
      ci_cd_integration:
        type: "boolean"
        description: "Whether tests are integrated into CI/CD pipeline"

  deployment_process:
    required: true
    description: "Deployment workflow and requirements"
    fields:
      environments:
        type: "array"
        description: "Deployment environments"
        examples: ["development", "staging", "production"]
      deployment_method:
        type: "string"
        enum: ["manual", "automated", "continuous", "scheduled"]
        description: "How deployments are executed"
      rollback_strategy:
        type: "string"
        description: "Strategy for handling failed deployments"
      monitoring_requirements:
        type: "array"
        description: "Monitoring and alerting requirements"

  security_requirements:
    required: true
    description: "Security standards and practices"
    fields:
      security_scanning:
        type: "boolean"
        description: "Whether security scanning is performed"
      vulnerability_management:
        type: "string"
        description: "How vulnerabilities are managed and tracked"
      authentication_method:
        type: "string"
        description: "Primary authentication method used"
      data_protection:
        type: "array"
        description: "Data protection measures in place"

  performance_standards:
    required: false
    description: "Performance requirements and standards"
    fields:
      response_time_targets:
        type: "object"
        description: "Response time targets for different operations"
      throughput_requirements:
        type: "object"
        description: "Throughput requirements"
      resource_constraints:
        type: "object"
        description: "Resource usage constraints"
      monitoring_metrics:
        type: "array"
        description: "Key performance metrics to monitor"

  documentation_standards:
    required: true
    description: "Documentation requirements and standards"
    fields:
      code_documentation:
        type: "string"
        enum: ["required", "encouraged", "optional"]
        description: "Level of code documentation required"
      api_documentation:
        type: "boolean"
        description: "Whether API documentation is required"
      user_documentation:
        type: "boolean"
        description: "Whether user documentation is maintained"
      architecture_documentation:
        type: "boolean"
        description: "Whether architecture documentation is maintained"

  technology_stack:
    required: true
    description: "Technology stack and architectural decisions"
    fields:
      languages:
        type: "array"
        description: "Programming languages used"
      frameworks:
        type: "array"
        description: "Frameworks and libraries used"
      databases:
        type: "array"
        description: "Database systems used"
      infrastructure:
        type: "array"
        description: "Infrastructure and deployment platforms"
      external_services:
        type: "array"
        description: "External services and APIs integrated"

  coding_standards:
    required: true
    description: "Code style and conventions"
    fields:
      style_guide:
        type: "string"
        description: "Code style guide followed"
      naming_conventions:
        type: "object"
        description: "Naming conventions for different code elements"
      file_organization:
        type: "string"
        description: "How files and directories are organized"
      comment_requirements:
        type: "string"
        description: "Requirements for code comments"

validation_rules:
  methodology_consistency:
    description: "Development cycle must be consistent with methodology"
    rule: "If methodology is TDD, cycle should include red-green-refactor phases"
  
  coverage_valid_range:
    description: "Test coverage must be valid percentage"
    rule: "test_coverage_minimum >= 0 AND <= 100"
  
  environment_progression:
    description: "Environments should follow logical progression"
    rule: "Environments should be in order of promotion (dev -> staging -> prod)"
  
  required_quality_gates:
    description: "Quality gates must include essential checks"
    rule: "If test_coverage_minimum > 0, quality_gates must include test-related gate"

usage_examples:
  minimal_structure: |
    project_identity:
      name: "example-project"
      type: "cli_tool"
      language: "bash"
      framework: "bash"
      version: "1.0.0"
    
    development_workflow:
      methodology: "TDD"
      cycle: ["red", "green", "refactor"]
      quality_gates: ["all_tests_pass"]
    
    quality_standards:
      test_coverage_minimum: 80
      code_quality_tools: ["shellcheck"]
      review_requirements:
        required: true
        min_reviewers: 1
    
    testing_strategy:
      test_types: ["unit", "integration"]
      automation_level: "full"
      ci_cd_integration: true
    
    deployment_process:
      environments: ["development", "production"]
      deployment_method: "automated"

  comprehensive_structure: |
    # See .carl/project/process.carl for complete example

best_practices:
  analysis_based_generation:
    - "Extract methodology from existing test structure and CI/CD setup"
    - "Infer quality standards from linting configurations and test coverage"
    - "Identify technology stack from package files and imports"
  
  consistency_maintenance:
    - "Ensure development workflow aligns with project structure"
    - "Match testing strategy to existing test files and frameworks"
    - "Align deployment process with existing CI/CD configurations"
  
  regular_updates:
    - "Update when major technology changes occur"
    - "Review and update quality standards as project matures"
    - "Sync with team decisions and architectural changes"

integration_points:
  carl_analyze:
    description: "Generated during project analysis"
    access_pattern: "Created and updated by /carl:analyze command"
  
  carl_task:
    description: "Referenced for quality gate validation"
    access_pattern: "Read for understanding quality requirements"
  
  carl_plan:
    description: "Used for requirements validation"
    access_pattern: "Read for understanding project constraints"
  
  context_injection:
    description: "Injected into AI context for development guidance"
    access_pattern: "Read by context injection system"
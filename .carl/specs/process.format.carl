# CARL Process Format Specification
# Version: 1.0
# Purpose: Define structure for process.carl files in project repositories

format_specification:
  artifact_type: "process"
  file_extension: ".carl"
  ai_optimized: true
  max_recommended_size: "1500_tokens"
  refresh_strategy: "session_start"

required_sections:
  process_metadata:
    - process_version: "semantic_version"
    - project_context: "one_line_description"
    - last_updated: "iso_timestamp"
    - context_priority: "high|medium|low"

  development_workflow:
    - methodology: "TDD|BDD|Agile|Waterfall|Custom"
    - cycle_steps: "array_of_workflow_steps"
    - quality_gates: "array_of_quality_requirements"
    - review_process: "code_review_requirements"

  coding_standards:
    - style_guide: "reference_to_style_rules"
    - patterns:
        preferred: "array_of_encouraged_patterns"
        restricted: "array_of_forbidden_patterns"
        required: "array_of_mandatory_patterns"
    - naming_conventions: "reference_or_inline_rules"

  technology_constraints:
    - frameworks:
        allowed: "array_of_permitted_frameworks"
        restricted: "array_of_forbidden_frameworks"
        preferred: "array_of_recommended_frameworks"
    - libraries:
        evaluation_criteria: "how_to_assess_new_libraries"
        approval_process: "who_approves_new_dependencies"
    - testing_requirements:
        unit_framework: "required_unit_test_framework"
        integration_framework: "required_integration_test_framework"
        coverage_minimum: "percentage_threshold"

  project_constraints:
    - performance_requirements: "response_time_and_throughput_goals"
    - security_requirements: "security_standards_and_compliance"
    - scalability_requirements: "expected_growth_and_capacity"
    - deployment_constraints: "environment_and_deployment_restrictions"

optional_sections:
  language_specific:
    - reference: "path_to_language_specific_process_files"
    - override_rules: "which_sections_can_be_overridden"

  framework_specific:
    - reference: "path_to_framework_specific_process_files"
    - integration_points: "how_framework_rules_merge_with_base"

  team_workflow:
    - branching_strategy: "git_workflow_requirements"
    - merge_requirements: "pull_request_and_review_standards"
    - deployment_process: "CI_CD_pipeline_requirements"

context_optimization:
  priority_loading:
    high: ["methodology", "coding_standards", "current_constraints"]
    medium: ["technology_constraints", "quality_gates"]
    low: ["team_workflow", "deployment_process"]
  
  compression_strategy:
    - "load_only_active_constraints"
    - "reference_external_files_for_detailed_rules"
    - "summarize_unchanged_sections"

  refresh_triggers:
    - "session_start"
    - "user_requests_process_change"
    - "technology_stack_modification"
    - "team_composition_change"

ai_consumption_guidelines:
  primary_purpose: "provide_development_context_and_constraints"
  loading_strategy: "prioritize_sections_relevant_to_current_task"
  update_frequency: "maintain_current_with_project_evolution"
  context_window_management: "never_exceed_1500_tokens_when_loaded"

example_structure:
  minimal_process: |
    process_version: "1.0"
    project_context: "React web application with TDD workflow"
    
    development_workflow:
      methodology: "TDD"
      cycle: ["red", "green", "refactor"]
    
    coding_standards:
      style_guide: "@.carl/standards/typescript.format.carl"
      patterns:
        preferred: ["dependency_injection", "composition"]
        restricted: ["singleton", "god_object"]
    
    technology_constraints:
      frameworks:
        allowed: ["react", "express", "jest"]
        restricted: ["jquery", "backbone"]
      testing:
        unit: "jest"
        coverage_minimum: 80

validation_rules:
  required_fields: ["process_version", "development_workflow", "coding_standards"]
  version_compatibility: "must_specify_compatible_carl_version"
  size_limits: "compressed_representation_under_1500_tokens"
  reference_validation: "all_external_references_must_exist"

migration_guidelines:
  from_markdown: "convert_existing_process_docs_to_carl_format"
  version_updates: "preserve_customizations_during_format_upgrades"
  team_adoption: "gradual_migration_with_fallback_to_existing_docs"

# Implementation Notes for AI Systems:
# - Always load process.carl at session start
# - Reference sections by priority based on current development task
# - Cache frequently accessed sections to minimize re-parsing
# - Monitor token usage and compress when approaching limits
# - Update process when user requests development workflow changes
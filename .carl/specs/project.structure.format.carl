# CARL Project Structure Format Specification
# Version: 1.0
# Purpose: Define the hierarchical project structure for .carl/project/ directory

directory_structure: ".carl/project/"
purpose: "Organize project-specific CARL files in hierarchical scope-based structure"
encoding: "UTF-8"

structure:
  root_directory:
    path: ".carl/project/"
    description: "Root directory for all project-specific CARL files"
    required: true
    
  scope_directories:
    epics:
      path: ".carl/project/epics/"
      description: "Large-scale initiatives spanning multiple features"
      file_pattern: "{epic-name}.intent.carl, {epic-name}.state.carl"
      scope_level: "epic"
      typical_duration: "weeks to months"
      examples: 
        - "user-management-system"
        - "mobile-app-redesign" 
        - "api-v2-migration"
    
    features:
      path: ".carl/project/features/"
      description: "Coherent functionality that delivers user value"
      file_pattern: "{feature-name}.intent.carl, {feature-name}.state.carl"
      scope_level: "feature"
      typical_duration: "days to weeks"
      examples:
        - "user-authentication"
        - "shopping-cart"
        - "payment-processing"
    
    stories:
      path: ".carl/project/stories/"
      description: "Specific user stories with acceptance criteria"
      file_pattern: "{story-name}.intent.carl, {story-name}.state.carl"
      scope_level: "story"
      typical_duration: "hours to days"
      examples:
        - "user-login-form"
        - "password-reset-email"
        - "checkout-confirmation"
    
    technical:
      path: ".carl/project/technical/"
      description: "Technical initiatives, refactoring, and infrastructure work"
      file_pattern: "{initiative-name}.intent.carl, {initiative-name}.state.carl"
      scope_level: "technical"
      typical_duration: "hours to weeks"
      examples:
        - "database-migration"
        - "api-refactoring"
        - "performance-optimization"

  special_files:
    process_definition:
      path: ".carl/project/process.carl"
      description: "Project-specific development process and standards"
      required: true
      format: "YAML"
      specification: "project.process.format.carl"
    
    active_work:
      path: ".carl/project/active.work.carl"
      description: "Active work tracking and intelligent task queue"
      required: true
      format: "YAML"
      specification: "active.work.format.carl"

file_naming_conventions:
  intent_files:
    pattern: "{scope-level}/{descriptive-name}.intent.carl"
    description: "Intent files define requirements and scope"
    naming_rules:
      - "Use lowercase with hyphens for separation"
      - "Be descriptive but concise (2-4 words)"
      - "Avoid technical jargon in favor of business terms"
    examples:
      - "epics/user-management-system.intent.carl"
      - "features/user-authentication.intent.carl"
      - "stories/login-form-validation.intent.carl"
      - "technical/api-performance-optimization.intent.carl"
  
  state_files:
    pattern: "{scope-level}/{descriptive-name}.state.carl"
    description: "State files track implementation progress"
    naming_rules:
      - "Must match corresponding intent file name exactly"
      - "Created automatically when intent is started"
    examples:
      - "epics/user-management-system.state.carl"
      - "features/user-authentication.state.carl"

hierarchical_relationships:
  epic_to_feature:
    description: "Epics contain multiple related features"
    relationship: "1:many"
    linking_method: "parent_id field in feature intent files"
    example:
      epic: "epics/user-management-system"
      features:
        - "features/user-registration"
        - "features/user-authentication"
        - "features/user-profile-management"
  
  feature_to_story:
    description: "Features are broken down into implementable user stories"
    relationship: "1:many"
    linking_method: "parent_id field in story intent files"
    example:
      feature: "features/user-authentication"
      stories:
        - "stories/login-form"
        - "stories/password-validation"
        - "stories/session-management"
  
  cross_scope_dependencies:
    description: "Items can depend on items from different scopes"
    linking_method: "dependencies field in intent files"
    examples:
      - "Feature depends on technical initiative"
      - "Story depends on another story from different feature"

directory_organization_rules:
  scope_separation:
    rule: "Each scope level has its own directory"
    rationale: "Clear organization and easy navigation"
  
  flat_within_scope:
    rule: "No subdirectories within scope directories"
    rationale: "Avoid over-organization and maintain simplicity"
  
  consistent_naming:
    rule: "Use consistent naming patterns across all scopes"
    rationale: "Predictable file locations and easy tooling"

integration_with_templates:
  epic_template:
    path: ".carl/templates/intent/epic.intent.template.carl"
    usage: "Create new epic intent files"
  
  feature_template:
    path: ".carl/templates/intent/feature.intent.template.carl"
    usage: "Create new feature intent files"
  
  story_template:
    path: ".carl/templates/intent/story.intent.template.carl"
    usage: "Create new story intent files"
  
  technical_template:
    path: ".carl/templates/intent/technical.intent.template.carl"
    usage: "Create new technical initiative intent files"

workflow_integration:
  planning_workflow:
    - "Start with epic-level planning for large initiatives"
    - "Break down epics into features during detailed planning"
    - "Create stories when ready for implementation"
    - "Add technical initiatives as needed for infrastructure work"
  
  implementation_workflow:
    - "Work primarily at story and technical level"
    - "Update state files as work progresses"
    - "Track dependencies between different scope levels"
    - "Use active.work.carl for intelligent task management"

migration_from_legacy:
  old_structure:
    directories: [".carl/intents/", ".carl/states/", ".carl/contexts/"]
    description: "Previous flat directory structure"
  
  migration_strategy:
    - "Analyze existing files to determine appropriate scope level"
    - "Move files to appropriate scope directories"
    - "Update parent_id relationships to establish hierarchy"
    - "Create active.work.carl to track current state"

validation_rules:
  directory_structure:
    - "All scope directories must exist"
    - "process.carl and active.work.carl must exist in project root"
  
  file_relationships:
    - "State files must have corresponding intent files"
    - "Parent relationships must reference existing files"
    - "No circular dependencies allowed"
  
  naming_consistency:
    - "File names must match between intent and state files"
    - "Names must follow kebab-case convention"
    - "Names must be unique within scope directory"

best_practices:
  scope_selection:
    epic: "Use for initiatives spanning multiple teams or quarters"
    feature: "Use for coherent functionality delivering user value"
    story: "Use for work that can be completed in 1-3 days"
    technical: "Use for infrastructure, refactoring, or tech debt work"
  
  organization_tips:
    - "Start broad with epics, then decompose as needed"
    - "Keep story scope small and implementable"
    - "Use technical scope for non-user-facing work"
    - "Maintain clear parent-child relationships"
  
  maintenance:
    - "Regularly review and update active.work.carl"
    - "Archive completed work by updating state files"
    - "Keep project structure documentation current"
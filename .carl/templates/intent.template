# CARL Intent File Template
# This template is used to generate consistent .intent files for features and requirements

id: {feature_id}
parent: {parent_feature_id}
type: {feature_type}  # feature_development, epic_initiative, technical_improvement, bug_fix
complexity: {complexity_level}  # low, medium, high
priority: {priority_level}  # P0, P1, P2
status: {current_status}  # planning, development, testing, production
estimated_duration: {time_estimate}

intent:
  what: "{what_description}"
  why: "{why_rationale}"  
  who: [{stakeholder_list}]

# For feature development
user_stories:
  core_stories:
    - story: "{user_story_description}"
      acceptance_criteria:
        - "{criterion_1}"
        - "{criterion_2}"
        - "{criterion_3}"
      effort_estimate: "{effort_estimate}"
      priority: "{story_priority}"
  
  enhancement_stories:
    - story: "{enhancement_story}"
      acceptance_criteria:
        - "{criterion_1}"
        - "{criterion_2}"
      effort_estimate: "{effort_estimate}"
      priority: "{story_priority}"

# For epic initiatives  
epic_breakdown:
  core_features:
    - id: "{feature_id}"
      priority: "{priority}"
      description: "{feature_description}"
      effort_estimate: "{time_estimate}"
  
  enhancement_features:
    - id: "{feature_id}"
      priority: "{priority}"
      description: "{feature_description}"
      effort_estimate: "{time_estimate}"

# For technical improvements
technical_objectives:
  code_quality:
    - "{quality_improvement_1}"
    - "{quality_improvement_2}"
  
  architectural_improvements:
    - "{architecture_improvement_1}"
    - "{architecture_improvement_2}"
  
  performance_improvements:
    - "{performance_improvement_1}"
    - "{performance_improvement_2}"

requirements:
  functional:
    - requirement: "{functional_requirement}"
      rationale: "{business_rationale}"
      validation: "{validation_method}"
  
  non_functional:
    - requirement: "{non_functional_requirement}"
      rationale: "{technical_rationale}" 
      validation: "{validation_method}"

constraints:
  must_have:
    - "{critical_constraint_1}"
    - "{critical_constraint_2}"
  
  should_have:
    - "{important_constraint_1}"
    - "{important_constraint_2}"
  
  must_not:
    - "{forbidden_constraint_1}"
    - "{forbidden_constraint_2}"

success_criteria:
  business_metrics:
    - "{business_success_metric}"
    - "{user_impact_metric}"
  
  technical_metrics:
    - "{performance_metric}"
    - "{quality_metric}"
  
  completion_criteria:
    - "{completion_requirement_1}"
    - "{completion_requirement_2}"

dependencies:
  requires:
    - feature: "{dependency_feature}"
      relationship: "{dependency_type}"
      impact: "{impact_description}"
  
  blocks:
    - feature: "{blocked_feature}"
      relationship: "{blocking_type}"
      impact: "{impact_description}"

risks:
  technical_risks:
    - risk: "{technical_risk}"
      probability: "{high|medium|low}"
      impact: "{high|medium|low}"
      mitigation: "{mitigation_strategy}"
  
  business_risks:
    - risk: "{business_risk}"
      probability: "{high|medium|low}"
      impact: "{high|medium|low}"
      mitigation: "{mitigation_strategy}"

# Metadata
created: {creation_timestamp}
last_updated: {update_timestamp}
created_by: "{creator_name}"
stakeholders: [{stakeholder_list}]
review_status: {review_status}  # draft, reviewed, approved
# {CONTEXT_NAME} - Architectural Context
# Generated by CARL v{CARL_VERSION} on {CREATION_DATE}  
# Analysis: {ANALYSIS_METHOD}
# Confidence: {ANALYSIS_CONFIDENCE}

context_id: "{CONTEXT_ID}"
context_type: "{CONTEXT_TYPE}"
scope: "{CONTEXT_SCOPE}"
related_intents: {RELATED_INTENT_FILES}
last_updated: "{CREATION_DATE}"
analysis_confidence: "{ANALYSIS_CONFIDENCE}"

architectural_overview:
  system_purpose: "{SYSTEM_PURPOSE}"
  architectural_pattern: "{DETECTED_PATTERN}"
  design_principles: {IDENTIFIED_PRINCIPLES}
  quality_attributes: {QUALITY_FOCUS}

component_relationships:
  parent_components: {PARENT_RELATIONSHIPS}
  child_components: {CHILD_RELATIONSHIPS}
  peer_relationships: {PEER_RELATIONSHIPS}

external_dependencies:
  services: {EXTERNAL_SERVICES}
  data_sources: {DATA_SOURCES}
  external_libraries: {LIBRARY_DEPENDENCIES}

data_flow_mapping:
  input_flows: {INPUT_DATA_FLOWS}
  output_flows: {OUTPUT_DATA_FLOWS}
  internal_flows: {INTERNAL_DATA_FLOWS}

integration_points:
  api_contracts: {API_INTERFACES}
  event_contracts: {EVENT_INTERFACES}
  database_contracts: {DATABASE_INTERFACES}

architectural_constraints:
  performance_constraints: {PERFORMANCE_LIMITS}
  security_constraints: {SECURITY_REQUIREMENTS}
  scalability_constraints: {SCALING_REQUIREMENTS}

technology_decisions:
  framework_choices: {FRAMEWORK_DECISIONS}
  infrastructure_decisions: {INFRASTRUCTURE_DECISIONS}

context_analysis:
  change_impact_assessment: {CHANGE_IMPACT_AREAS}
  risk_assessment: {ARCHITECTURAL_RISKS}
  optimization_opportunities: {OPTIMIZATION_AREAS}

# Template Variables:
# {CONTEXT_NAME} - Human-readable name for this architectural context
# {CARL_VERSION} - Current CARL version
# {CREATION_DATE} - ISO timestamp of generation
# {ANALYSIS_METHOD} - code_analysis|manual_documentation|hybrid
# {ANALYSIS_CONFIDENCE} - high|medium|low based on analysis depth
# {CONTEXT_ID} - Unique snake_case identifier
# {CONTEXT_TYPE} - system|service|component|integration|data_flow
# {CONTEXT_SCOPE} - Description of what this context covers
# {RELATED_INTENT_FILES} - Array of intent files this context supports
# {SYSTEM_PURPOSE} - What this system or component does
# {DETECTED_PATTERN} - MVC|microservices|layered|event_driven|etc
# {IDENTIFIED_PRINCIPLES} - Array of guiding architectural principles
# {QUALITY_FOCUS} - Performance|security|scalability|maintainability focus
# {PARENT_RELATIONSHIPS} - Components this is contained within
# {CHILD_RELATIONSHIPS} - Components this contains or manages
# {PEER_RELATIONSHIPS} - Components this interacts with as peers
# {EXTERNAL_SERVICES} - External APIs and services
# {DATA_SOURCES} - Databases and data stores
# {LIBRARY_DEPENDENCIES} - Third-party libraries and frameworks
# {INPUT_DATA_FLOWS} - Where data comes from
# {OUTPUT_DATA_FLOWS} - Where data goes to
# {INTERNAL_DATA_FLOWS} - How data moves within the system
# {API_INTERFACES} - REST, GraphQL, gRPC interfaces
# {EVENT_INTERFACES} - Published and consumed events
# {DATABASE_INTERFACES} - Database schemas and access patterns
# {PERFORMANCE_LIMITS} - Latency, throughput, resource constraints
# {SECURITY_REQUIREMENTS} - Authentication, authorization, compliance
# {SCALING_REQUIREMENTS} - Horizontal, vertical, geographic scaling
# {FRAMEWORK_DECISIONS} - Chosen frameworks and rationale
# {INFRASTRUCTURE_DECISIONS} - Hosting, database, messaging choices
# {CHANGE_IMPACT_AREAS} - Components affected by potential changes
# {ARCHITECTURAL_RISKS} - Single points of failure, risky dependencies
# {OPTIMIZATION_AREAS} - Bottlenecks, redundancies, improvement opportunities

# Analysis Methods:
# code_analysis: Generated from automated code inspection
# manual_documentation: Created from existing documentation
# hybrid: Combination of automated analysis and manual input

# Confidence Levels:
# high: Complete analysis with validated relationships
# medium: Good coverage with some gaps or assumptions
# low: Initial analysis requiring manual validation
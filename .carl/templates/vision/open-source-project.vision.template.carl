# Open Source Project Vision Template
# Template for open source projects prioritizing community adoption and contribution
# Template Type: open_source_project
# Strategic Focus: community_adoption, contribution_sustainability, ecosystem_development

template_metadata:
  template_type: "open_source_project"
  template_version: "1.0.0"
  strategic_focus: ["community_adoption", "contribution_sustainability", "ecosystem_development"]
  project_characteristics: ["community_driven", "public_development", "collaborative", "transparency_focused"]
  recommended_for: ["libraries", "frameworks", "tools", "platforms", "developer_focused_projects"]

# Project Identity - Define your open source project's core identity
project_identity:
  name: "[YOUR_PROJECT_NAME]"
  # Help: Choose a name that's memorable, searchable, and reflects your project's purpose
  # Example: "ReactQuery" for data fetching, "Prettier" for code formatting, "Kubernetes" for orchestration
  
  mission: "[DEFINE_YOUR_MISSION]"
  # Help: Describe the problem you're solving for the developer/user community
  # Example: "Simplify complex data fetching in React applications with powerful caching and synchronization"
  # Focus on: Community problem, solution approach, unique value
  
  value_proposition: "[YOUR_UNIQUE_VALUE_PROPOSITION]"
  # Help: What makes your open source project different and valuable to users?
  # Example: "The most intuitive data fetching library with zero configuration and maximum flexibility"
  # Include: Unique benefits, ease of use, community advantages
  
  target_community: "[DEFINE_TARGET_COMMUNITY]"
  # Help: Who is your primary user and contributor community?
  # Example: "React developers building data-intensive applications in startup and enterprise environments"
  # Be specific: Technology focus, experience level, use cases, community size

# Strategic Objectives - Your key community and project goals (prioritize 3-6 objectives)
strategic_objectives:
  - id: "community_adoption"
    description: "[DRIVE_COMMUNITY_ADOPTION]"
    # Help: How will you measure and drive adoption in your target community?
    # Example: "Achieve widespread adoption with 100k+ weekly npm downloads and 10k+ GitHub stars"
    priority: 1
    success_metrics: ["[ADOPTION_METRIC]"]
    # Example: ["100k+ weekly downloads", "10k+ GitHub stars", "500+ production implementations"]
  
  - id: "contributor_engagement"
    description: "[BUILD_CONTRIBUTOR_COMMUNITY]"
    # Help: How will you attract and retain active contributors?
    # Example: "Build thriving contributor community with 50+ regular contributors and 200+ merged PRs monthly"
    priority: 2
    success_metrics: ["[CONTRIBUTION_METRIC]"]
    # Example: ["50+ monthly contributors", "200+ merged PRs", "95% PR response time < 48hrs"]
  
  - id: "project_sustainability"
    description: "[ENSURE_PROJECT_SUSTAINABILITY]"
    # Help: How will you ensure long-term project health and sustainability?
    # Example: "Establish sustainable governance and funding model for long-term project health"
    priority: 3
    success_metrics: ["[SUSTAINABILITY_METRIC]"]
    # Example: ["3+ core maintainers", "Funding for 2+ full-time contributors", "Clear governance model"]
  
  - id: "ecosystem_impact"
    description: "[CREATE_ECOSYSTEM_IMPACT]"
    # Help: How will your project contribute to and impact the broader ecosystem?
    # Example: "Become the standard solution adopted by major frameworks and recommended in official documentation"
    priority: 4
    success_metrics: ["[ECOSYSTEM_METRIC]"]
    # Example: ["Integration with 5+ major frameworks", "Referenced in official React docs"]

# Alignment Criteria - Weighted criteria for evaluating feature alignment (must sum to 1.0)
alignment_criteria:
  community_value:
    weight: 0.30
    # Open Source Priority: Does this provide clear value to the community?
    measurement_rules:
      - "Features that solve real problems experienced by significant portions of the community"
      - "Capabilities that reduce complexity or improve developer experience"
      - "Functionality that enables new use cases or workflows for users"
    
  adoption_enablement:
    weight: 0.25
    # Open Source Priority: Does this remove barriers to adoption and usage?
    measurement_rules:
      - "Features that improve ease of onboarding and getting started"
      - "Capabilities that work well with existing tools and workflows"
      - "Functionality that has clear documentation and examples"
    
  contribution_friendliness:
    weight: 0.20
    # Open Source Priority: Does this support community contribution and collaboration?
    measurement_rules:
      - "Features with clear contribution guidelines and good first issues"
      - "Capabilities that are well-architected and maintainable by community"
      - "Functionality that includes comprehensive tests and documentation"
    
  ecosystem_compatibility:
    weight: 0.15
    # Open Source Priority: Does this integrate well with ecosystem tools and standards?
    measurement_rules:
      - "Features that follow established community conventions and standards"
      - "Capabilities that work well with popular tools and frameworks"
      - "Functionality that supports common integration patterns"
    
  project_sustainability:
    weight: 0.10
    # Open Source Priority: Does this support long-term project health and governance?
    measurement_rules:
      - "Features that don't create excessive maintenance burden"
      - "Capabilities that can be sustained by community contributions"
      - "Functionality that aligns with project governance and direction"

# Stakeholders - Key people and groups in open source context
stakeholders:
  primary_users: ["[PRIMARY_USER_COMMUNITY]"]
  # Help: Who are the main users of your open source project?
  # Example: ["react_developers", "frontend_engineers", "fullstack_developers"]
  
  contributors: ["[CONTRIBUTOR_TYPES]"]
  # Help: Who contributes to your project (code, docs, issues, etc.)?
  # Example: ["core_maintainers", "regular_contributors", "occasional_contributors", "issue_reporters"]
  
  maintainers: ["[MAINTAINER_ROLES]"]
  # Help: Who maintains and governs the project?
  # Example: ["project_leads", "core_maintainers", "area_specialists", "community_moderators"]
  
  ecosystem_stakeholders: ["[ECOSYSTEM_PARTICIPANTS]"]
  # Help: Who in the broader ecosystem is affected by or influences your project?
  # Example: ["framework_authors", "tool_builders", "platform_providers", "conference_organizers"]
  
  sponsors_supporters: ["[SPONSORS_SUPPORTERS]"]
  # Help: Who provides financial or organizational support?
  # Example: ["corporate_sponsors", "individual_sponsors", "foundation_support", "hosting_providers"]

# Success Criteria - How you'll measure open source project success
success_criteria:
  adoption_metrics: "[ADOPTION_SUCCESS_METRIC]"
  # Help: How will you measure community adoption and usage?
  # Example: "500k+ monthly downloads, 50k+ GitHub stars, 1000+ production deployments"
  
  community_health: "[COMMUNITY_HEALTH_METRIC]"
  # Help: How will you measure community engagement and health?
  # Example: "100+ monthly contributors, 90% issue response rate, 4.5+ star rating"
  
  project_impact: "[PROJECT_IMPACT_METRIC]"
  # Help: How will you measure your project's impact on the ecosystem?
  # Example: "Referenced in 10+ major tutorials, integrated in 5+ popular frameworks"
  
  sustainability_indicators: "[SUSTAINABILITY_METRIC]"
  # Help: How will you measure long-term project sustainability?
  # Example: "3+ core maintainers, sustainable funding, clear succession planning"

# Technical Context - Open source technology and architecture considerations
technical_context:
  technology_focus: ["[TECHNOLOGY_DOMAIN]"]
  # Help: What technology areas does your project address?
  # Example: ["react", "data_fetching", "state_management", "developer_tools"]
  
  architecture_principles: ["[ARCHITECTURE_PRINCIPLES]"]
  # Help: What architectural principles guide your technical decisions?
  # Example: ["simple_api", "zero_config", "framework_agnostic", "tree_shakeable"]
  
  compatibility_requirements: ["[COMPATIBILITY_TARGETS]"]
  # Help: What compatibility requirements must you maintain?
  # Example: ["react_16_8_plus", "node_12_plus", "typescript_support", "es5_compatible"]
  
  quality_standards: ["[QUALITY_STANDARDS]"]
  # Help: What quality standards does your project maintain?
  # Example: ["100%_test_coverage", "zero_breaking_changes", "semantic_versioning", "comprehensive_docs"]

# Community Guidelines - Open source community standards and expectations
community_guidelines:
  code_of_conduct: "[CODE_OF_CONDUCT_APPROACH]"
  # Help: How will you ensure a welcoming and inclusive community?
  # Example: "Contributor Covenant with active moderation and clear enforcement procedures"
  
  contribution_process: ["[CONTRIBUTION_WORKFLOW]"]
  # Help: What process do contributors follow?
  # Example: ["github_issues", "pull_request_template", "code_review_process", "ci_cd_validation"]
  
  governance_model: "[GOVERNANCE_APPROACH]"
  # Help: How are project decisions made and who makes them?
  # Example: "Benevolent dictator with core maintainer team for technical decisions"
  
  communication_channels: ["[COMMUNICATION_METHODS]"]
  # Help: How does the community communicate and collaborate?
  # Example: ["github_discussions", "discord_server", "monthly_maintainer_calls", "twitter_updates"]

# Licensing and Legal - Open source licensing and legal considerations
licensing_framework:
  primary_license: "[PRIMARY_LICENSE]"
  # Help: What open source license does your project use?
  # Example: "MIT License for maximum adoption flexibility"
  
  contribution_licensing: "[CONTRIBUTION_LICENSE]"
  # Help: How are contributions licensed?
  # Example: "Contributors License Agreement (CLA) or Developer Certificate of Origin (DCO)"
  
  trademark_policy: "[TRADEMARK_APPROACH]"
  # Help: How are project names and trademarks managed?
  # Example: "Project name trademarked by foundation with usage guidelines for community"

# Risk Assessment - Open source specific risks and mitigation strategies
risk_factors:
  community_risks:
    - risk: "[COMMUNITY_RISK]"
      # Example: "Key maintainers burn out or leave project"
      mitigation: "[MITIGATION_STRATEGY]"
      # Example: "Develop contributor pipeline and distribute maintenance responsibilities"
  
  adoption_risks:
    - risk: "[ADOPTION_RISK]"
      # Example: "Competing project gains market share"
      mitigation: "[MITIGATION_STRATEGY]"
      # Example: "Focus on unique value proposition and superior developer experience"
  
  sustainability_risks:
    - risk: "[SUSTAINABILITY_RISK]"
      # Example: "Lack of funding for continued development"
      mitigation: "[MITIGATION_STRATEGY]"
      # Example: "Diversify funding sources and build corporate sponsorship program"
  
  technical_risks:
    - risk: "[TECHNICAL_RISK]"
      # Example: "Breaking changes in core dependencies"
      mitigation: "[MITIGATION_STRATEGY]"
      # Example: "Maintain compatibility layers and clear migration paths"

# Cross-References - Links to other open source project CARL files
cross_references:
  roadmap_file: ".carl/project/roadmap.carl"
  # Link to public project roadmap and milestones
  
  decisions_file: ".carl/decisions.carl"
  # Link to architectural and community decisions
  
  process_file: ".carl/project/process.carl"
  # Link to contribution and development processes
  
  community_file: ".carl/project/community.carl"
  # Link to community guidelines and governance

# Template Completion Guide
completion_guide:
  getting_started:
    - "Replace all [PLACEHOLDER] text with specific open source project details"
    - "Focus on community value and adoption barriers"
    - "Be transparent about project goals and sustainability plans"
    - "Consider ecosystem impact and integration opportunities"
  
  alignment_criteria_tips:
    - "Community value should typically have highest weight for open source projects"
    - "Adoption enablement is crucial for project growth"
    - "Contribution friendliness supports community sustainability"
    - "Balance innovation with ecosystem compatibility"
  
  community_considerations:
    - "Plan for diverse contributor skill levels and time availability"
    - "Create clear pathways from user to contributor to maintainer"
    - "Establish governance that scales with project growth"
    - "Build inclusive community culture from the beginning"
  
  validation_checklist:
    - "All strategic objectives support community growth and sustainability"
    - "Success criteria include both adoption and community health metrics"
    - "Technical decisions balance innovation with compatibility"
    - "Governance model is clear and supports decision-making at scale"
    - "Sustainability plan addresses both technical and community aspects"

# Template Notes
template_notes: |
  This template is optimized for open source projects focused on building thriving
  communities and creating lasting impact in their respective ecosystems.
  
  Key open source specific considerations:
  - Community value and adoption enablement are primary success factors
  - Contributor experience is as important as user experience
  - Transparency and inclusive governance are essential
  - Long-term sustainability requires diverse community and funding
  
  Customize this template based on:
  - Your specific technology domain and target community
  - Project maturity level (new project vs established project)
  - Governance model and organizational structure
  - Funding and sustainability approach
  
  Remember: Open source success is measured by community health and impact,
  not just technical metrics. Plan for community building from day one.
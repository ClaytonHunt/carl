# CARL Hooks Node.js Migration - Epic Intent
# Created: 2025-07-31T13:25:55-04:00
# Scope: Epic
# Purpose: Maintain exact existing functionality while migrating from bash to Node.js

metadata:
  id: "carl_hooks_nodejs_migration"
  scope_level: "epic"
  created_date: "2025-07-31T13:25:55-04:00"
  created_by: "carl_plan_command"
  project_phase: "foundation_consolidation"
  strategic_alignment: "ai_context_optimization"
  priority: "high"
  complexity: "medium"
  estimated_effort: "2-3 weeks"

epic_definition:
  name: "CARL Hooks Node.js Migration"
  description: "Direct migration of existing bash hook scripts to Node.js maintaining exact functionality"
  
  problem_statement: |
    Current bash hooks work but are difficult to maintain, test, and debug. Need to migrate to 
    Node.js for better maintainability while preserving ALL existing functionality exactly as-is.
    No new features or improvements - just a direct 1:1 migration to enable future enhancements.
  
  solution_approach: |
    Create Node.js versions of each hook script that replicate the exact bash functionality.
    Maintain same file operations, same audio playback, same context injection, same session
    management. Focus on direct translation first, improvements can come later.

business_value:
  primary_stakeholders:
    - name: "CARL maintainer"
      value: "JavaScript codebase easier to maintain and debug"
    - name: "CARL users"
      value: "Zero change in functionality - seamless transition"
  
  success_metrics:
    - metric: "Functionality preservation"
      target: "100% feature parity with bash scripts"
      measurement: "Side-by-side testing of all scenarios"
    - metric: "User experience"
      target: "Zero noticeable changes for users"
      measurement: "User cannot tell hooks were migrated"
  
  strategic_alignment_score: 8.0
  business_value_score: 7.5
  implementation_complexity_score: 5.0

existing_functionality_to_preserve:
  session_start_hook:
    - "Check CARL initialization status"
    - "Load and display project vision/roadmap (first 10 lines)"
    - "Resume previous session if exists"
    - "Count intent/state/context files for health summary"
    - "Check for recent file updates"
    - "Play welcome audio with project context"
    - "Display quick command suggestions"
    - "Create new session record with timestamp"
    - "Update current session symlink"
    
  session_end_hook:
    - "Save session state using carl-session-manager.sh"
    - "Display session summary (duration, files, lines)"
    - "Update CARL index with session data"
    - "Play farewell audio based on work done"
    - "Clean up old session files (>7 days)"
    - "Handle missing session gracefully"
    
  user_prompt_submit_hook:
    - "Parse JSON input for prompt"
    - "Check if context injection is enabled"
    - "Detect CARL-relevant prompts (commands, keywords)"
    - "Inject active CARL context"
    - "Add strategic context for planning"
    - "Add alignment validation for features"
    - "Initialize session tracking if needed"
    - "Add personality instructions when enabled"
    - "Format final prompt with all context"
    
  tool_call_hook:
    - "Handle both pre and post phases"
    - "Parse tool name from JSON"
    - "Play appropriate audio for tool type"
    - "Log activities to CARL system"
    - "Track significant code changes"
    - "Detect test success/failure patterns"
    - "Update progress metrics"
    - "Check and celebrate milestones"

migration_requirements:
  technical_constraints:
    - "Must read same CARL files from same locations"
    - "Must call same helper functions (port as needed)"
    - "Must produce identical output format"
    - "Must handle errors same way (no breaking Claude Code)"
    - "Must complete within 60-second timeout"
    
  helper_functions_to_port:
    from_carl_helpers:
      - "carl_get_active_context"
      - "carl_get_strategic_context"
      - "carl_get_alignment_validation_context"
      - "carl_get_targeted_context"
      - "carl_get_setting"
      - "carl_log_activity"
      - "carl_log_milestone"
      - "carl_update_state_from_changes"
      - "carl_update_progress_metrics"
      - "carl_update_session_activity"
      - "carl_check_and_celebrate_milestones"
      
    from_carl_audio:
      - "carl_play_audio"
      
    from_carl_session_manager:
      - "carl_end_session"
      - "carl_get_session_context"
      - "carl_calculate_session_duration"
      - "carl_count_modified_files"
      - "carl_count_added_lines"
      - "carl_count_removed_lines"
      - "carl_update_index_with_session_data"
      - "carl_cleanup_old_sessions"
      - "carl_get_current_session_file"

implementation_approach:
  phase_1_analysis:
    - "Map all bash functions to Node.js equivalents"
    - "Identify file I/O patterns to replicate"
    - "Document all edge cases and error handling"
    
  phase_2_core_utilities:
    - "Port helper functions to Node.js modules"
    - "Create file operation utilities"
    - "Implement session management functions"
    - "Set up audio playback system"
    
  phase_3_hook_scripts:
    - "Implement session-start.js maintaining exact output"
    - "Implement session-end.js with same summary format"
    - "Implement user-prompt-submit.js with same context injection"
    - "Implement tool-call.js with same tracking logic"
    
  phase_4_testing:
    - "Side-by-side output comparison"
    - "Edge case testing"
    - "Performance validation"
    - "Integration testing with Claude Code"

testing_strategy:
  comparison_testing:
    - "Run bash and Node.js versions in parallel"
    - "Compare outputs character by character"
    - "Verify file operations produce same results"
    - "Test error handling matches exactly"
    
  scenario_testing:
    - "Fresh CARL installation"
    - "Existing project with history"
    - "Missing files and error conditions"
    - "Various prompt types and tool calls"

success_criteria:
  - "All hooks produce identical output to bash versions"
  - "File operations create same files in same locations"
  - "Audio playback works identically"
  - "Session tracking maintains same format"
  - "Error handling doesn't break Claude Code"
  - "Performance within acceptable bounds"
  
migration_plan:
  - "Implement Node.js versions alongside bash"
  - "Test extensively in parallel"
  - "Gradual rollout with feature flag"
  - "Keep bash scripts as fallback"
  - "Full cutover only after validation"

risks_and_mitigation:
  - risk: "Breaking existing workflows"
    mitigation: "Extensive testing and gradual rollout"
  - risk: "Missing edge cases"
    mitigation: "Keep bash scripts as reference and fallback"
  - risk: "Performance differences"
    mitigation: "Profile and optimize critical paths"

next_steps:
  immediate: "Analyze bash scripts line by line for complete requirements"
  short_term: "Port core helper functions to Node.js"
  long_term: "Implement and test each hook script"
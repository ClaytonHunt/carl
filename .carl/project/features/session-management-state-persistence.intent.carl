# Session Management and State Persistence - Feature Intent
# Created: 2025-07-31T13:25:55-04:00
# Parent Epic: carl-infrastructure-modernization
# Scope: Feature

metadata:
  id: "session_management_state_persistence"
  scope_level: "feature"
  created_date: "2025-07-31T13:25:55-04:00"
  created_by: "carl_plan_command"
  parent_epic: "carl_infrastructure_modernization"
  priority: "high"
  complexity: "medium"
  estimated_effort: "1 week"

feature_definition:
  name: "Session Management and State Persistence"
  description: "Robust session tracking system with state persistence, correlation, and recovery capabilities for accurate work measurement"
  
  problem_statement: |
    Current session tracking is fragmented across bash scripts without proper state persistence 
    or correlation capabilities. Cannot track work across multiple sessions, recover from 
    interruptions, or correlate activities to specific CARL work items. This prevents accurate 
    velocity measurement and work timing analysis.
  
  solution_approach: |
    Implement comprehensive Node.js session management system with persistent state storage, 
    session correlation algorithms, and recovery mechanisms. Enable tracking of work patterns 
    across multiple sessions with automatic CARL context detection and activity classification.

business_value:
  primary_stakeholders:
    - name: "Development teams using CARL"
      value: "Accurate work timing without manual tracking overhead"
    - name: "Project managers"
      value: "Reliable velocity data for planning and forecasting"
    - name: "CARL analytics consumers"
      value: "Rich session data for performance analysis"
  
  success_metrics:
    - metric: "Session tracking accuracy"
      target: "100% of work sessions captured with correct timing"
      measurement: "Session audit and validation testing"
    - metric: "State persistence reliability"
      target: "Zero data loss across session interruptions"
      measurement: "Recovery testing and data integrity checks"
    - metric: "Work correlation accuracy"
      target: "95% accurate mapping of activities to CARL items"
      measurement: "Manual validation of session-to-work mapping"
  
  strategic_alignment_score: 9.0
  business_value_score: 8.5
  implementation_complexity_score: 7.0

functional_requirements:
  core_capabilities:
    - capability: "Session lifecycle management"
      description: "Track complete session lifecycle from start to end"
      acceptance_criteria:
        - "Capture session start with unique identifier and timestamp"
        - "Track session activities and state changes"
        - "Handle session end (normal and abnormal termination)"
        - "Support session pause and resume"
    
    - capability: "State persistence"
      description: "Reliable storage and recovery of session state"
      acceptance_criteria:
        - "Atomic state writes to prevent corruption"
        - "Session state recovery after crashes"
        - "Configurable retention policies"
        - "Efficient storage with compression"
        
    - capability: "Work correlation"
      description: "Map session activities to specific CARL work items"
      acceptance_criteria:
        - "Automatic CARL context detection from activities"
        - "Confidence scoring for work item mapping"
        - "Support for multi-tasking within sessions"
        - "Manual correlation override capability"
        
    - capability: "Session analytics"
      description: "Analyze session patterns and work behavior"
      acceptance_criteria:
        - "Session duration and activity frequency metrics"
        - "Work pattern identification (focused vs. scattered)"
        - "Productivity trend analysis"
        - "Session history querying"

technical_requirements:
  architecture_components:
    core_services:
      - service: "SessionManager"
        responsibility: "Orchestrate session lifecycle and state"
        interfaces: ["createSession", "updateSession", "endSession", "recoverSession"]
        storage: "JSON files in .carl/.sessions/"
        
      - service: "StateStore"
        responsibility: "Persist and retrieve session state"
        interfaces: ["save", "load", "query", "cleanup"]
        features: ["Atomic writes", "Compression", "Indexing"]
        
      - service: "ActivityTracker"
        responsibility: "Record and classify session activities"
        interfaces: ["trackActivity", "classifyActivity", "getActivityHistory"]
        classification: ["tool_calls", "file_changes", "commands", "prompts"]
        
      - service: "CorrelationEngine"
        responsibility: "Map activities to CARL work items"
        interfaces: ["correlateActivity", "getWorkContext", "updateMapping"]
        algorithms: ["keyword_matching", "file_path_analysis", "context_inference"]
        
      - service: "SessionAnalyzer"
        responsibility: "Generate insights from session data"
        interfaces: ["analyzeSession", "aggregateMetrics", "identifyPatterns"]
        metrics: ["duration", "intensity", "focus", "productivity"]
    
    data_models:
      - model: "Session"
        fields: |
          {
            id: "uuid",
            start_time: "ISO 8601",
            end_time: "ISO 8601",
            status: "active|paused|completed|crashed",
            work_items: ["carl_intent_ids"],
            activities: ["Activity[]"],
            metrics: "SessionMetrics"
          }
        
      - model: "Activity"
        fields: |
          {
            timestamp: "ISO 8601",
            type: "tool_call|file_change|command|prompt",
            details: "object",
            carl_context: "CARLContext",
            relevance_score: "0-1"
          }
        
      - model: "SessionState"
        fields: |
          {
            session_id: "uuid",
            last_checkpoint: "ISO 8601",
            active_work: ["carl_intent_ids"],
            pending_updates: ["StateUpdate[]"],
            recovery_data: "object"
          }
  
  storage_strategy:
    session_data:
      location: ".carl/.sessions/active/"
      format: "JSON with compression"
      retention: "Move to archive after completion"
      
    archived_sessions:
      location: ".carl/.sessions/archive/"
      format: "Compressed JSON"
      retention: "Configurable (default 90 days)"
      
    state_checkpoints:
      location: ".carl/.sessions/checkpoints/"
      frequency: "Every 5 minutes or significant state change"
      cleanup: "Remove after session completion"
      
    analytics_cache:
      location: ".carl/.sessions/analytics/"
      format: "Aggregated metrics JSON"
      update_frequency: "On session end"

implementation_approach:
  session_flow:
    session_start: |
      1. Generate unique session ID (UUID v4)
      2. Create session record with metadata
      3. Initialize state checkpoint
      4. Detect initial CARL context
      5. Start activity tracking
      
    during_session: |
      1. Track all Claude Code activities
      2. Classify activity relevance to CARL work
      3. Update session state periodically
      4. Checkpoint state for recovery
      5. Maintain work item correlations
      
    session_end: |
      1. Finalize session metrics
      2. Update CARL state files
      3. Archive session data
      4. Update analytics cache
      5. Clean up temporary data
      
    crash_recovery: |
      1. Detect incomplete sessions on startup
      2. Load last checkpoint
      3. Prompt for session recovery
      4. Restore state and continue or close
      5. Mark session with recovery flag

  correlation_algorithms:
    file_path_matching:
      description: "Match file operations to CARL project structure"
      confidence: "High when paths match CARL directories"
      
    command_analysis:
      description: "Analyze carl:task and other commands for context"
      confidence: "Very high for explicit CARL commands"
      
    prompt_keyword_extraction:
      description: "Extract CARL intent names from user prompts"
      confidence: "Medium to high based on keyword matches"
      
    temporal_proximity:
      description: "Use recent CARL context for ambiguous activities"
      confidence: "Medium, decreases with time gap"

testing_strategy:
  test_scenarios:
    - "Normal session flow from start to completion"
    - "Session interruption and recovery"
    - "Multi-session work on single CARL item"
    - "Concurrent work on multiple CARL items"
    - "Session state corruption recovery"
    - "Performance with large activity volumes"
    
  test_infrastructure:
    - "Mock Claude Code session events"
    - "Session state manipulation utilities"
    - "Activity generation fixtures"
    - "Correlation accuracy validators"

dependencies:
  internal_dependencies:
    - dependency: "Node.js hook system"
      status: "in_development"
      requirement: "Hook integration for activity capture"
      
    - dependency: "CARL file processing engine"
      status: "in_development"
      requirement: "Read/write CARL state files"
      
  external_dependencies:
    - dependency: "uuid"
      status: "stable"
      requirement: "Session ID generation"
      
    - dependency: "node-cron"
      status: "stable"
      requirement: "Scheduled cleanup tasks"

success_definition:
  completion_criteria:
    - "Complete session lifecycle tracking operational"
    - "State persistence with crash recovery functional"
    - "95% accurate work correlation achieved"
    - "Session analytics providing actionable insights"
    - "Performance targets met (< 10ms overhead)"
  
  validation_approach:
    - "End-to-end session tracking validation"
    - "Crash recovery testing"
    - "Correlation accuracy measurement"
    - "Performance benchmarking"

related_intents:
  parent_epic: "carl_infrastructure_modernization"
  enables_features:
    - "accurate_date_tracking_system"
    - "velocity_measurement_analytics"
  depends_on:
    - "nodejs_hook_system_architecture"
  
next_actions:
  immediate: "Design session state schema and storage format"
  short_term: "Implement core SessionManager with persistence"
  long_term: "Build correlation engine and analytics"
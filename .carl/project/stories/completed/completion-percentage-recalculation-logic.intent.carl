# Completion Percentage Recalculation Logic - Story Intent
# Generated by CARL v1.7.1 on 2025-07-31T17:30:00Z
# Type: Story
# Scope: Automatic parent completion percentage updates based on child completion states

id: "completion_percentage_recalculation_logic"
type: "story"
parent_id: "hierarchical_update_implementation"
complexity: "medium_high"
priority: "P1"
estimated_duration: "4-6 days, high confidence"
created_date: "2025-07-31T17:30:00Z"
status: "draft"

intent_definition:
  what: "Implement automatic recalculation of parent completion percentages based on child completion states using simple average calculation, with atomic state file updates and parent completion detection when 100% reached"
  why: "Users need feature and epic completion percentages to automatically update when child stories and features complete, eliminating manual progress tracking and ensuring accurate hierarchical project status"
  who: ["hierarchical_update_system", "carl_completion_workflow", "project_status_tracking", "ai_context_systems"]
  when: "core_implementation_step_enables_automatic_hierarchical_progress_updates"
  constraints: ["simple_average_calculation_sufficient", "atomic_state_file_operations_required", "preserve_existing_state_data", "trigger_parent_completion_workflow_when_100_percent"]

scope_definition:
  in_scope:
    - "read_child_state_files_to_get_current_completion_percentages"
    - "calculate_simple_arithmetic_average_of_child_completion_percentages"
    - "update_parent_state_file_completion_percentage_atomically"
    - "trigger_parent_completion_workflow_when_100_percent_reached"
    - "preserve_all_other_parent_state_file_data_during_updates"
    - "handle_missing_or_malformed_child_state_files_gracefully"
  out_of_scope:
    - "weighted_completion_calculations_based_on_child_complexity"
    - "manual_progress_override_mechanisms"
    - "complex_completion_calculation_algorithms"
    - "cross_project_completion_percentage_calculations"
  assumptions:
    - "simple_arithmetic_average_sufficient_for_hierarchical_completion_accuracy"
    - "child_state_files_contain_reliable_completion_percentage_field"
    - "parent_completion_100_percent_indicates_readiness_for_completion_workflow"
    - "atomic_state_file_operations_prevent_data_corruption"
  dependencies:
    - "parent_child_relationship_discovery"
    - "carl_state_file_format_with_completion_percentage_field"
    - "existing_completion_workflow_for_100_percent_items"

business_objectives:
  primary_value: "automated_accurate_hierarchical_completion_tracking"
  user_experience_improvements:
    - "feature_completion_percentage_automatically_reflects_story_progress"
    - "epic_completion_percentage_automatically_reflects_feature_progress"
    - "project_status_accuracy_without_manual_percentage_updates"
    - "immediate_completion_detection_when_all_children_100_percent"
  productivity_gains:
    - "eliminated_manual_completion_percentage_calculations"
    - "automatic_parent_completion_workflow_triggering"
    - "reduced_cognitive_overhead_for_progress_tracking"
    - "accurate_project_status_for_stakeholder_reporting"
  quality_improvements:
    - "consistent_completion_percentage_accuracy_across_hierarchy"
    - "atomic_state_updates_prevent_inconsistent_progress_states"
    - "automatic_completion_detection_eliminates_human_error"

current_state_analysis:
  existing_capability: "individual_completion_percentage_tracking_in_state_files"
  missing_functionality: "no_automatic_parent_completion_percentage_recalculation"
  pain_points:
    - "completing_story_does_not_update_feature_completion_percentage"
    - "completing_feature_does_not_update_epic_completion_percentage"
    - "manual_calculation_and_update_of_parent_completion_required"
    - "project_status_becomes_stale_without_manual_maintenance"
  workflow_gaps:
    - "completion_workflow_isolated_to_individual_items"
    - "hierarchical_progress_invisible_to_status_and_tracking_systems"
    - "parent_completion_detection_requires_manual_intervention"

target_state_definition:
  automated_calculation: "seamless_parent_completion_percentage_updates_from_child_states"
  user_experience:
    - "story_completion_immediately_recalculates_feature_completion_percentage"
    - "feature_completion_immediately_recalculates_epic_completion_percentage"
    - "parent_automatically_marked_100_percent_when_all_children_complete"
    - "parent_completion_workflow_triggered_automatically_at_100_percent"
  technical_behavior:
    - "simple_arithmetic_average_calculation_of_child_completion_percentages"
    - "atomic_state_file_updates_preserve_data_integrity"
    - "parent_completion_detection_triggers_existing_completion_workflow"

functional_requirements:
  child_completion_reading:
    - capability: "Read completion percentages from all child state files"
      description: "Efficiently read and parse completion_percentage field from all child state files"
      acceptance_criteria:
        - "discovers_all_child_state_files_using_parent_child_relationship_map"
        - "reads_completion_percentage_field_from_each_child_state_file"
        - "handles_missing_child_state_files_gracefully_excludes_from_calculation"
        - "handles_malformed_completion_percentage_values_with_default_zero"
        - "supports_all_scope_types_epic_feature_story_technical"
      edge_cases:
        - "handle_child_state_files_that_do_not_exist_yet"
        - "handle_child_state_files_with_missing_completion_percentage_field"
        - "handle_child_state_files_with_invalid_completion_percentage_values"

  completion_percentage_calculation:
    - capability: "Calculate parent completion percentage as simple average of children"
      description: "Compute arithmetic average of child completion percentages for parent completion"
      acceptance_criteria:
        - "calculates_simple_arithmetic_average_of_child_completion_percentages"
        - "handles_zero_children_case_gracefully_maintains_current_parent_percentage"
        - "rounds_calculated_percentage_to_reasonable_precision_two_decimal_places"
        - "returns_100_percent_when_all_children_at_100_percent"
        - "provides_accurate_calculation_for_mixed_child_completion_states"
      calculation_examples:
        - "children_50_75_100_percent_equals_parent_75_percent"
        - "children_100_100_100_percent_equals_parent_100_percent"
        - "children_0_25_50_equals_parent_25_percent"
        - "single_child_80_percent_equals_parent_80_percent"

  atomic_state_file_updates:
    - capability: "Update parent state file completion percentage atomically"
      description: "Safely update parent state file with new completion percentage while preserving all other data"
      acceptance_criteria:
        - "reads_current_parent_state_file_preserving_all_existing_fields"
        - "updates_only_completion_percentage_field_with_calculated_value"
        - "writes_updated_state_file_atomically_preventing_partial_updates"
        - "handles_concurrent_access_to_state_files_safely"
        - "preserves_yaml_formatting_and_structure_of_state_files"
      data_integrity_requirements:
        - "atomic_read_modify_write_operations_for_state_files"
        - "rollback_capability_if_state_file_update_fails"
        - "validation_that_updated_state_file_valid_yaml"
        - "preservation_of_all_metadata_and_non_completion_fields"

  parent_completion_detection:
    - capability: "Trigger parent completion workflow when 100% reached"
      description: "Detect when parent reaches 100% completion and trigger existing completion workflow"
      acceptance_criteria:
        - "detects_when_calculated_parent_completion_percentage_equals_100"
        - "triggers_existing_carl_completion_workflow_for_parent_item"
        - "integrates_seamlessly_with_existing_completion_detection_logic"
        - "ensures_parent_completion_workflow_atomic_and_consistent"
        - "updates_active_work_tracking_when_parent_completes"
      integration_points:
        - "hook_into_existing_carl_completion_js_workflow"
        - "trigger_atomic_commit_and_file_movement_for_completed_parent"
        - "update_active_work_queues_to_reflect_parent_completion"

technical_requirements:
  file_operations:
    - "efficient_yaml_reading_and_parsing_for_multiple_child_state_files"
    - "atomic_yaml_writing_with_preserved_formatting_and_structure"
    - "robust_error_handling_for_file_system_operations"
    - "concurrent_file_access_handling_with_appropriate_locking"
  
  calculation_precision:
    - "floating_point_arithmetic_for_completion_percentage_calculations"
    - "appropriate_rounding_to_prevent_precision_errors"
    - "validation_of_calculated_percentages_within_0_100_range"
    - "consistent_calculation_results_across_different_platforms"
  
  integration_architecture:
    - "modular_design_for_easy_integration_with_hierarchical_propagation"
    - "clean_separation_between_calculation_and_state_update_logic"
    - "hook_points_for_integration_with_existing_completion_workflow"
    - "comprehensive_logging_for_debugging_calculation_and_update_operations"

non_functional_requirements:
  performance:
    - "completion_percentage_recalculation_completes_within_100ms_for_typical_hierarchies"
    - "efficient_handling_of_hierarchies_with_dozens_of_child_items"
    - "minimal_file_system_operations_through_efficient_child_state_reading"
    - "cached_child_completion_data_when_multiple_calculations_needed"
  
  reliability:
    - "atomic_state_file_operations_ensure_data_consistency"
    - "comprehensive_error_handling_prevents_partial_completion_updates"
    - "rollback_capability_restores_consistent_state_on_operation_failure"
    - "graceful_degradation_when_child_state_files_inaccessible"
  
  accuracy:
    - "completion_percentage_calculations_accurate_to_two_decimal_places"
    - "consistent_calculation_results_for_same_child_completion_states"
    - "proper_handling_of_edge_cases_zero_children_all_100_percent_mixed_states"
    - "validation_of_calculated_percentages_within_valid_range"

user_acceptance_criteria:
  calculation_scenarios:
    - scenario: "Feature completion percentage updates when story completes"
      given: "Feature 'user-management' has 3 child stories with completion: story1=100%, story2=50%, story3=75%"
      when: "Story2 completes and updates to 100%"
      then: "Feature completion percentage automatically recalculated to 91.67% (average of 100%, 100%, 75%)"
      and: "Feature state file updated with new completion percentage 91.67%"
      and: "All other feature state file data preserved unchanged"
    
    - scenario: "Epic completion percentage updates when feature completes"
      given: "Epic 'authentication-system' has 2 child features with completion: feature1=75%, feature2=80%"
      when: "Feature1 completes and updates to 100%"
      then: "Epic completion percentage automatically recalculated to 90% (average of 100%, 80%)"
      and: "Epic state file updated with new completion percentage 90%"
      and: "Epic does not trigger completion workflow since not 100%"
    
    - scenario: "Parent completion workflow triggered when all children 100%"
      given: "Epic 'user-interface' has 2 child features with completion: feature1=100%, feature2=95%"
      when: "Feature2 completes and updates to 100%"
      then: "Epic completion percentage automatically recalculated to 100% (average of 100%, 100%)"
      and: "Epic state file updated with 100% completion"
      and: "Existing completion workflow triggered for epic"
      and: "Epic files moved to completed folder with git history preservation"
      and: "Active work queue updated to remove completed epic"

implementation_approach:
  phase_1: "Child completion reading and calculation (2-3 days)"
    - "implement_child_state_file_discovery_using_relationship_map"
    - "create_completion_percentage_reading_from_yaml_state_files"
    - "develop_simple_arithmetic_average_calculation_algorithm"
    - "comprehensive_testing_of_calculation_accuracy_across_scenarios"
  
  phase_2: "Atomic state file updates (1-2 days)"
    - "implement_atomic_yaml_state_file_read_modify_write_operations"
    - "add_data_preservation_logic_for_non_completion_fields"
    - "create_comprehensive_error_handling_and_rollback_mechanisms"
    - "testing_of_state_file_update_consistency_and_atomic_operations"
  
  phase_3: "Parent completion detection and integration (1 day)"
    - "implement_100_percent_completion_detection_logic"
    - "integrate_with_existing_carl_completion_workflow"
    - "add_active_work_tracking_updates_for_completed_parents"
    - "end_to_end_testing_of_hierarchical_completion_scenarios"

risk_assessment:
  technical_risks:
    - risk: "concurrent_state_file_access_causes_data_corruption_during_updates"
      probability: "medium"
      impact: "high"
      mitigation: "implement_file_locking_and_atomic_operation_patterns"
    - risk: "floating_point_precision_errors_cause_incorrect_completion_calculations"
      probability: "low"
      impact: "medium"
      mitigation: "use_appropriate_rounding_and_validation_of_calculated_percentages"
    - risk: "large_numbers_of_child_items_cause_performance_degradation"
      probability: "low"
      impact: "medium"
      mitigation: "implement_efficient_batch_reading_and_caching_strategies"
  
  business_risks:
    - risk: "calculation_inaccuracies_cause_incorrect_project_status_reporting"
      probability: "low"
      impact: "medium"
      mitigation: "comprehensive_testing_and_validation_of_calculation_algorithms"

success_criteria:
  calculation_accuracy:
    - "completion_percentage_calculations_accurate_to_two_decimal_places"
    - "100_percent_accuracy_for_simple_average_calculations"
    - "correct_handling_of_all_edge_cases_zero_children_all_100_mixed_states"
    - "consistent_results_across_different_platform_implementations"
  
  state_file_integrity:
    - "100_percent_data_preservation_for_non_completion_fields_in_state_files"
    - "atomic_state_file_updates_prevent_partial_or_corrupted_states"
    - "yaml_formatting_and_structure_preserved_across_updates"
    - "zero_data_loss_during_completion_percentage_update_operations"
  
  integration_success:
    - "seamless_integration_with_existing_completion_workflow_when_100_percent"
    - "automatic_parent_completion_detection_and_triggering_100_percent_accurate"
    - "active_work_tracking_correctly_updated_when_parents_complete"

progress_tracking:
  completion_percentage: 0
  milestones:
    milestone_1: "child_completion_reading_and_calculation_algorithms_functional"
    milestone_2: "atomic_state_file_update_operations_implemented_and_tested"
    milestone_3: "parent_completion_detection_and_workflow_triggering_working"
    milestone_4: "comprehensive_testing_across_all_hierarchical_scenarios_complete"
    milestone_5: "integration_with_existing_completion_workflow_validated"
  blockers: []

relationships:
  parent_relationships: ["hierarchical_update_implementation"]
  child_relationships: []
  cross_references:
    - "parent_child_relationship_discovery"
    - "bidirectional_state_propagation"
    - "carl_completion_js_workflow"
  enables:
    - "automated_hierarchical_completion_percentage_accuracy"
    - "automatic_parent_completion_workflow_triggering"
    - "real_time_project_status_visibility_across_hierarchy"

# AI Context Optimization Notes:
# - Core calculation logic enabling automatic hierarchical progress updates
# - Simple average calculation sufficient for most hierarchical progress tracking needs
# - Atomic operations ensure data integrity during hierarchical state transitions
# - Integration with existing completion workflow maintains consistency with current behavior
# Core Helper Module Migration - Story Intent
# Created: 2025-07-31T14:06:50-04:00
# Parent Epic: carl-infrastructure-modernization
# Scope: User Story

metadata:
  id: "core_helper_module_migration"
  scope_level: "story"
  created_date: "2025-07-31T14:06:50-04:00"
  created_by: "carl_plan_command"
  parent_epic: "carl_infrastructure_modernization"
  priority: "critical"
  complexity: "medium"
  estimated_effort: "3-4 days"

story_definition:
  name: "Core Helper Module Migration"
  description: "Port bash helper functions to Node.js modules maintaining exact functionality"
  
  user_story: |
    As a CARL developer migrating to Node.js,
    I want to port all bash helper functions to Node.js modules,
    So that hook scripts can use the same functionality in a maintainable way.
  
  problem_statement: |
    Hook scripts depend on bash helper functions in carl-helpers.sh, carl-audio.sh, and 
    carl-session-manager.sh. Need to port these functions to Node.js while maintaining 
    exact behavior for CARL context loading, settings management, audio playback, and 
    session tracking.

acceptance_criteria:
  primary_scenarios:
    - scenario: "CARL context functions ported"
      given: "bash functions like carl_get_active_context"
      when: "implementing Node.js equivalents"
      then: "should return identical formatted output"
      
    - scenario: "Settings management functions ported"
      given: "bash functions like carl_get_setting"
      when: "implementing Node.js equivalents"
      then: "should check same files in same order with same defaults"
      
    - scenario: "Audio system functions ported"
      given: "bash functions like carl_play_audio"
      when: "implementing Node.js equivalents"
      then: "should play same audio files with same platform detection"
      
    - scenario: "Session management functions ported"
      given: "bash functions like carl_end_session"
      when: "implementing Node.js equivalents"
      then: "should create identical session files and metrics"

technical_acceptance_criteria:
  module_structure:
    - "lib/carl-helpers.js - Context and settings functions"
    - "lib/carl-audio.js - Audio playback functions"
    - "lib/carl-session.js - Session management functions"
    - "lib/utils.js - Common utilities (file operations, etc.)"
    
  functional_requirements:
    - "All bash functions have Node.js equivalents"
    - "File I/O operations match bash behavior exactly"
    - "Error handling preserves bash script behavior"
    - "Cross-platform compatibility maintained"

detailed_function_mapping:
  carl_helpers_functions:
    - bash_function: "carl_get_active_context"
      node_function: "getActiveContext()"
      behavior: "Read .carl/active-work.carl and format context string"
      
    - bash_function: "carl_get_strategic_context"
      node_function: "getStrategicContext(prompt)"
      behavior: "Load vision.carl and roadmap.carl based on prompt analysis"
      
    - bash_function: "carl_get_alignment_validation_context"
      node_function: "getAlignmentValidationContext(prompt)"
      behavior: "Add strategic alignment validation for features"
      
    - bash_function: "carl_get_targeted_context"
      node_function: "getTargetedContext(prompt)"
      behavior: "Load specific CARL files based on keyword matching"
      
    - bash_function: "carl_get_setting"
      node_function: "getSetting(key, defaultValue)"
      behavior: "Check settings files in hierarchy (user > team > global)"
      
    - bash_function: "carl_log_activity"
      node_function: "logActivity(type, details)"
      behavior: "Log activity to session and analytics files"
      
    - bash_function: "carl_log_milestone"
      node_function: "logMilestone(type, description)"
      behavior: "Record milestone achievements"
      
    - bash_function: "carl_update_state_from_changes"
      node_function: "updateStateFromChanges()"
      behavior: "Update CARL state files based on code changes"
      
    - bash_function: "carl_update_progress_metrics"
      node_function: "updateProgressMetrics()"
      behavior: "Recalculate and update progress tracking"
      
    - bash_function: "carl_update_session_activity"
      node_function: "updateSessionActivity(tool, phase)"
      behavior: "Track tool usage in current session"
      
    - bash_function: "carl_check_and_celebrate_milestones"
      node_function: "checkAndCelebrateMilestones()"
      behavior: "Check for achievements and trigger celebrations"

  carl_audio_functions:
    - bash_function: "carl_play_audio"
      node_function: "playAudio(event, message)"
      behavior: "Play audio file and/or speak message based on settings"
      platform_detection: "macOS: afplay, Linux: aplay/paplay, Windows: start"
      
  carl_session_functions:
    - bash_function: "carl_end_session"
      node_function: "endSession()"
      behavior: "Finalize current session and calculate metrics"
      
    - bash_function: "carl_get_session_context"
      node_function: "getSessionContext()"
      behavior: "Return formatted session summary"
      
    - bash_function: "carl_calculate_session_duration"
      node_function: "calculateSessionDuration()"
      behavior: "Calculate time between session start and end"
      
    - bash_function: "carl_count_modified_files"
      node_function: "countModifiedFiles()"
      behavior: "Count files modified during session using git"
      
    - bash_function: "carl_count_added_lines"
      node_function: "countAddedLines()"
      behavior: "Count lines added during session using git diff"
      
    - bash_function: "carl_count_removed_lines"
      node_function: "countRemovedLines()"
      behavior: "Count lines removed during session using git diff"
      
    - bash_function: "carl_update_index_with_session_data"
      node_function: "updateIndexWithSessionData()"
      behavior: "Update CARL index with session information"
      
    - bash_function: "carl_cleanup_old_sessions"
      node_function: "cleanupOldSessions()"
      behavior: "Remove session files older than configured threshold"
      
    - bash_function: "carl_get_current_session_file"
      node_function: "getCurrentSessionFile()"
      behavior: "Get path to current session file"

implementation_approach:
  development_phases:
    phase_1: "Core utilities and file operations (1 day)"
    phase_2: "CARL context and settings functions (1 day)"
    phase_3: "Session management functions (1 day)"
    phase_4: "Audio system functions (0.5 days)"
    phase_5: "Testing and validation (0.5 days)"
  
  module_design:
    dependency_injection: "Support mocking for testing"
    error_handling: "Graceful failures matching bash behavior"
    async_patterns: "Use async/await for file operations"
    cross_platform: "Handle path and command differences"

testing_strategy:
  unit_tests:
    - "Each function tested in isolation"
    - "File system operations mocked"
    - "Cross-platform behavior validated"
    - "Error conditions handled correctly"
    
  integration_tests:
    - "Module interactions tested"
    - "Real file system operations"
    - "End-to-end workflow validation"

dependencies:
  internal_dependencies:
    - dependency: "Existing bash scripts"
      status: "operational"
      requirement: "Reference implementation for behavior"
      
  external_dependencies:
    - dependency: "Node.js packages"
      packages: ["fs-extra", "yaml", "child_process"]
      purpose: "File operations, YAML parsing, external commands"

success_definition:
  completion_criteria:
    - "All bash functions have Node.js equivalents"
    - "Unit tests pass for all functions"
    - "Cross-platform compatibility verified"
    - "Performance meets or exceeds bash versions"
    - "Memory usage within acceptable bounds"
    
  validation_approach:
    - "Side-by-side output comparison"
    - "Unit test coverage > 90%"
    - "Integration testing with real CARL projects"

related_intents:
  parent_epic: "carl_infrastructure_modernization"
  enables:
    - "hook_script_implementation"
    - "golden_path_comparison_testing"
  
next_actions:
  immediate: "Set up Node.js project structure and dependencies"
  implementation: "Start with core utilities and file operations"
  testing: "Write unit tests for each module as implemented"
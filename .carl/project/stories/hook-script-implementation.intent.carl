# Hook Script Implementation - Story Intent
# Created: 2025-07-31T14:06:50-04:00
# Parent Epic: carl-infrastructure-modernization
# Scope: User Story

metadata:
  id: "hook_script_implementation"
  scope_level: "story"
  created_date: "2025-07-31T14:06:50-04:00"
  created_by: "carl_plan_command"
  parent_epic: "carl_infrastructure_modernization"
  priority: "critical"
  complexity: "high"
  estimated_effort: "4-5 days"

story_definition:
  name: "Hook Script Implementation"
  description: "Implement Node.js hook scripts that Claude Code executes, maintaining exact bash functionality"
  
  user_story: |
    As a CARL user,
    I want Claude Code hooks to work identically after migration to Node.js,
    So that my workflow and experience remain exactly the same.
  
  problem_statement: |
    Need to implement Node.js versions of session-start.sh, session-end.sh, 
    user-prompt-submit.sh, and tool-call.sh that produce identical output and 
    behavior to the bash versions. Scripts must process Claude Code JSON input 
    and maintain exact functionality for context injection, audio feedback, 
    session tracking, and activity logging.

acceptance_criteria:
  primary_scenarios:
    - scenario: "session-start.js identical to bash version"
      given: "Claude Code SessionStart event"
      when: "Node.js script processes the event"
      then: "output matches bash script exactly including health summary, audio, session creation"
      
    - scenario: "user-prompt-submit.js identical to bash version"
      given: "Claude Code UserPromptSubmit event with prompt"
      when: "Node.js script processes for context injection"
      then: "output matches bash including CARL context, personality, strategic context"
      
    - scenario: "tool-call.js identical to bash version"
      given: "Claude Code PreToolUse or PostToolUse events"
      when: "Node.js script processes tool tracking"
      then: "audio feedback, activity logging, milestone detection match exactly"
      
    - scenario: "session-end.js identical to bash version"
      given: "Claude Code session ending"
      when: "Node.js script finalizes session"
      then: "session summary, metrics, cleanup match bash behavior exactly"

technical_acceptance_criteria:
  script_structure:
    - "Each script reads JSON from stdin like bash versions"
    - "Error handling prevents Claude Code interruption"
    - "Output format matches bash exactly"
    - "File operations create identical files"
    
  performance_requirements:
    - "Complete within 60-second Claude Code timeout"
    - "Memory usage under 100MB per script"
    - "Startup time under 1 second"

detailed_script_specifications:
  session_start_script:
    file: ".claude/hooks/session-start.js"
    functionality:
      - "Check CARL initialization status"
      - "Display project vision/roadmap (first 10 lines)"
      - "Show project health summary (file counts)"
      - "Check for recent updates"
      - "Play welcome audio with project context"
      - "Display quick command suggestions"
      - "Create session record with timestamp"
      - "Update current session symlink"
    input: "Claude Code SessionStart event JSON"
    output: "Identical text to bash version"
    audio: "Welcome message with project name and file counts"
    files_created: 
      - ".carl/sessions/{session_id}.session"
      - ".carl/sessions/current.session (symlink)"
    
  session_end_script:
    file: ".claude/hooks/session-end.js"
    functionality:
      - "End session using session manager"
      - "Generate session summary (duration, files, lines)"
      - "Update CARL index with session data"
      - "Play farewell audio based on work done"
      - "Clean up old session files (>7 days)"
    input: "Claude Code session end event"
    output: "Session summary matching bash format"
    audio: "Farewell message mentioning files modified"
    files_modified:
      - "Session files archived"
      - "CARL index updated"
      - "Old sessions cleaned up"
    
  user_prompt_submit_script:
    file: ".claude/hooks/user-prompt-submit.js"
    functionality:
      - "Parse JSON input for prompt text"
      - "Check if context injection enabled"
      - "Detect CARL-relevant prompts (commands, keywords)"
      - "Inject active CARL context if relevant"
      - "Add strategic context for planning prompts"
      - "Add alignment validation for feature prompts"
      - "Initialize session tracking if needed"
      - "Add personality instructions when enabled"
      - "Format final prompt with all context"
    input: '{"prompt": "user prompt text"}'
    output: "Original prompt + CARL context (if relevant)"
    context_triggers:
      - "/carl: commands"
      - "implement, build, create, fix, refactor, optimize, test"
      - "feature, user story, requirement, bug, issue"
    personality_integration:
      - "Check carl_persona setting"
      - "Load personality config file"
      - "Inject personality instructions"
      - "Address user by first name"
    
  tool_call_script:
    file: ".claude/hooks/tool-call.js"
    functionality:
      - "Handle both pre and post phases (from arg)"
      - "Parse tool name from JSON input"
      - "Pre-phase: Play encouragement audio, log activity start"
      - "Post-phase: Update state, celebrate achievements, log completion"
      - "Detect significant code changes (>20 lines)"
      - "Analyze command output for success/failure patterns"
      - "Update session context with activity"
      - "Check and celebrate milestones"
    input: 'Tool event JSON + phase argument'
    pre_phase_audio:
      - "Edit/Write/MultiEdit: 'Time to get coding!'"
      - "Bash: 'Running some commands!'"
      - "TodoWrite: 'Updating our progress tracking!'"
    post_phase_detection:
      - "Test success: 'test.*pass|all tests pass|✓|success'"
      - "Build success: 'build.*success|compilation successful'"
      - "Errors: 'error|fail|exception|✗'"

implementation_approach:
  script_template: |
    #!/usr/bin/env node
    
    const { readStdin } = require('./lib/utils');
    const helpers = require('./lib/carl-helpers');
    const audio = require('./lib/carl-audio');
    const session = require('./lib/carl-session');
    
    async function main() {
      try {
        // Read JSON input from Claude Code
        const input = await readStdin();
        const eventData = JSON.parse(input);
        
        // Process event (script-specific logic)
        const result = await processEvent(eventData);
        
        // Output result
        console.log(result);
        
      } catch (error) {
        // Log errors to stderr (won't break Claude Code)
        console.error(`CARL Hook Error: ${error.message}`);
        process.exit(1);
      }
    }
    
    main();
  
  error_handling:
    - "All errors caught and logged to stderr"
    - "Graceful degradation on missing files"
    - "No unhandled promise rejections"
    - "Safe fallbacks for all operations"
  
  json_parsing:
    - "Robust JSON parsing with error handling"
    - "Support for malformed input"
    - "Fallback to original input on parse failure"

testing_integration:
  unit_tests:
    - "Each script function tested in isolation"
    - "Mock helper modules for testing"
    - "JSON input parsing validation"
    - "Error condition handling"
    
  integration_tests:
    - "End-to-end script execution"
    - "Real file system operations"
    - "Audio system integration"
    - "Claude Code event simulation"

cross_platform_considerations:
  file_paths:
    - "Use path.join() for cross-platform paths"
    - "Handle Windows path separators"
    - "Resolve CARL_ROOT correctly"
    
  commands:
    - "Platform-specific audio commands"
    - "Git command compatibility"
    - "File permission handling"

security_considerations:
  input_validation:
    - "Validate all JSON inputs"
    - "Sanitize file paths"
    - "Prevent command injection"
    - "Safe template interpolation"
    
  file_operations:
    - "Atomic file writes"
    - "Permission checks before operations"
    - "Path traversal prevention"

dependencies:
  internal_dependencies:
    - dependency: "Core helper modules"
      status: "to_be_implemented"
      requirement: "Helper functions ported to Node.js"
      
  external_dependencies:
    - dependency: "fs-extra"
      purpose: "Enhanced file operations"
    - dependency: "yaml"
      purpose: "YAML file parsing"
    - dependency: "child_process"
      purpose: "Audio playback and git commands"

success_definition:
  completion_criteria:
    - "All 4 hook scripts implemented in Node.js"
    - "Output matches bash versions exactly"
    - "File operations create identical results"
    - "Audio feedback works consistently"
    - "Error handling prevents Claude Code disruption"
    - "Performance within acceptable bounds"
    
  validation_approach:
    - "Side-by-side execution comparison"
    - "Output diff validation"
    - "File content verification"
    - "Audio playback testing"
    - "Error condition testing"

related_intents:
  parent_epic: "carl_infrastructure_modernization"
  depends_on:
    - "core_helper_module_migration"
  enables:
    - "golden_path_comparison_testing"
  
next_actions:
  immediate: "Start with session-start.js (simplest, most visible)"
  progression: "user-prompt-submit.js (most complex) → tool-call.js → session-end.js"
  testing: "Implement golden path comparison tests alongside development"
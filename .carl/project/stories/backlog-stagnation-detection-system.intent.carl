# Backlog Stagnation Detection System - Story Intent
# Created: 2025-07-31T12:49:33-04:00
# Parent Feature: accurate-date-tracking-system
# Scope: User Story

metadata:
  id: "backlog_stagnation_detection_system"
  scope_level: "story"
  created_date: "2025-07-31T12:49:33-04:00"
  created_by: "carl_plan_command"
  parent_feature: "accurate_date_tracking_system"
  priority: "medium"
  complexity: "medium"
  estimated_effort: "2-4 days"

story_definition:
  name: "Backlog Stagnation Detection System"
  description: "Automatically identify and alert on CARL items with no recent progress activity to prevent backlog stagnation"
  
  user_story: |
    As a project manager using CARL for backlog management,
    I want to automatically identify work items that have stagnated without recent progress,
    So that I can proactively address blockers and maintain healthy backlog flow.
  
  problem_statement: |
    Work items can stagnate in the backlog for extended periods without visibility, leading to 
    missed commitments and reduced team velocity. Need automated detection of idle items to 
    enable proactive backlog management and blocker resolution.

acceptance_criteria:
  primary_scenarios:
    - scenario: "Stagnation threshold detection"
      given: "CARL items with last activity timestamps"
      when: "Configurable stagnation threshold is exceeded (default 7 days)"
      then: "Items are flagged as stagnant and included in stagnation reports"
      
    - scenario: "Backlog age calculation"
      given: "CARL items with creation and last activity timestamps"
      when: "Backlog analysis is performed"
      then: "Age since creation and time since last meaningful progress are calculated"
      
    - scenario: "Stagnation alert integration"
      given: "Stagnant items identified in backlog analysis"
      when: "/carl:status dashboard is displayed"
      then: "Stagnation alerts are prominently displayed with actionable recommendations"
      
    - scenario: "Configurable stagnation thresholds"
      given: "Different project contexts requiring different stagnation sensitivity"
      when: "Stagnation detection configuration is customized"
      then: "Threshold periods are adjustable per project or scope level (story vs. epic)"

technical_acceptance_criteria:
  detection_requirements:
    - "Configurable stagnation thresholds (default: 7 days for stories, 14 days for features/epics)"
    - "Distinction between 'no activity' vs. 'no meaningful progress' stagnation"
    - "Exclusion of intentionally paused or blocked items from stagnation alerts"
    - "Support for different urgency levels based on stagnation duration"
  
  analysis_requirements:
    - "Age calculation from creation date to current date"
    - "Time since last meaningful activity (not just file modification)"
    - "Trend analysis showing stagnation pattern development"
    - "Impact assessment of stagnated items on overall project velocity"
  
  integration_requirements:
    - "Integration with /carl:status for stagnation dashboard display"
    - "Alert severity classification (warning/critical based on stagnation duration)"
    - "Export capabilities for external project management tools"

functional_requirements:
  core_detection_capabilities:
    - capability: "Multi-threshold stagnation detection"
      description: "Different stagnation thresholds based on scope level and project context"
      thresholds:
        - "Stories: 7 days without progress (warning), 14 days (critical)"
        - "Features: 14 days without progress (warning), 30 days (critical)"
        - "Epics: 30 days without progress (warning), 60 days (critical)"
        - "Technical tasks: 5 days without progress (warning), 10 days (critical)"
      
    - capability: "Meaningful activity recognition"
      description: "Distinguish between meaningful progress vs. superficial file updates"
      meaningful_activity:
        - "Work session start/completion timestamps"
        - "State file progress updates (completion percentage changes)"
        - "Git commits correlated with CARL work items"
        - "Tool execution within work sessions"
      non_meaningful_activity:
        - "File modification timestamps without content changes"
        - "Automated system updates to CARL files"
        - "Template or format updates without progress"
      
    - capability: "Stagnation impact analysis"
      description: "Assess impact of stagnated items on project health and velocity"
      impact_metrics:
        - "Percentage of backlog stagnated by work volume"
        - "Strategic importance of stagnated items (high priority features)"
        - "Dependency impact (stagnated items blocking other work)"
        - "Resource allocation efficiency (stagnation vs. active work ratio)"
      
    - capability: "Proactive stagnation prevention"
      description: "Early warning system for items trending toward stagnation"
      prevention_features:
        - "Items approaching stagnation threshold (e.g., 80% of threshold period)"
        - "Pattern recognition for items with declining activity frequency"
        - "Dependency chain analysis for potential cascade stagnation"

implementation_approach:
  development_tasks:
    - task: "Stagnation detection algorithm implementation"
      description: "Core logic for identifying stagnant items based on configurable thresholds"
      effort: "1 day"
      
    - task: "Meaningful activity classification system"
      description: "Logic to distinguish meaningful progress from superficial file updates"
      effort: "1 day"
      
    - task: "Backlog age and impact analysis utilities"
      description: "Calculate item age, stagnation duration, and project impact metrics"
      effort: "1 day"
      
    - task: "Configurable threshold management"
      description: "System for customizing stagnation thresholds per project and scope level"
      effort: "0.5 days"
      
    - task: "Dashboard integration and alert display"
      description: "Integrate stagnation alerts into /carl:status with actionable recommendations"
      effort: "1 day"

detection_algorithms:
  stagnation_identification:
    method: "Time-based analysis of last_activity_timestamp vs. current date"
    inputs: "CARL state files with timestamp data, configurable threshold settings"
    logic: |
      for each CARL item:
        stagnation_period = current_date - last_meaningful_activity
        if stagnation_period > threshold[scope_level]:
          classify as stagnant with severity based on duration
    
  meaningful_activity_filtering:
    method: "Activity type classification based on timestamp source and context"
    criteria: |
      meaningful_activity = {
        work_session_timestamps: high_weight,
        progress_percentage_changes: high_weight,
        git_commit_correlation: medium_weight,
        tool_execution_during_sessions: medium_weight
      }
      superficial_activity = {
        file_modification_only: low_weight,
        automated_updates: no_weight,
        template_changes: no_weight
      }

configuration_system:
  threshold_configuration:
    format: ".carl/settings/stagnation-thresholds.conf"
    example: |
      # Stagnation Detection Configuration
      stories_warning_days=7
      stories_critical_days=14
      features_warning_days=14
      features_critical_days=30
      epics_warning_days=30
      epics_critical_days=60
      technical_warning_days=5
      technical_critical_days=10
      
  exclusion_configuration:
    format: ".carl/settings/stagnation-exclusions.conf"
    example: |
      # Items excluded from stagnation detection
      paused_status=true
      blocked_status=true
      waiting_for_dependency=true
      intentionally_deferred=true

alert_system:
  severity_levels:
    warning: "Approaching stagnation threshold - proactive attention needed"
    critical: "Significantly stagnant - immediate action required"
    emergency: "Long-term stagnation threatening project health"
    
  alert_display_format:
    dashboard_integration: "Stagnation alerts prominently displayed in /carl:status"
    cli_output: "Dedicated stagnation report command for detailed analysis"
    export_format: "CSV/JSON export for external project management integration"

testing_strategy:
  test_scenarios:
    - "Stagnation detection accuracy with synthetic timestamp data"
    - "Meaningful vs. superficial activity classification validation"
    - "Configurable threshold behavior across different scope levels"
    - "Alert severity escalation based on stagnation duration"
    - "Performance testing with large backlogs (100+ CARL items)"
    - "Edge case handling (newly created items, paused work, blocked items)"

dependencies:
  internal:
    - dependency: "Real-time work timestamp capture"
      status: "in_development"
      requirement: "Accurate last activity timestamps for stagnation detection"
      
    - dependency: "CARL settings management system"
      status: "available"
      requirement: "Configuration system for customizable stagnation thresholds"
      
  external:
    - dependency: "Date calculation utilities"
      status: "available"
      requirement: "Reliable date arithmetic for age and stagnation period calculation"

success_definition:
  completion_criteria:
    - "Automated stagnation detection operational with configurable thresholds"
    - "Meaningful activity classification distinguishing real progress from file updates"
    - "Backlog age and impact analysis providing actionable insights"
    - "Stagnation alerts integrated into /carl:status dashboard"
    - "Configuration system allowing customization per project context"
  
  validation_approach:
    - "Stagnation detection accuracy testing with known stagnant items"
    - "Meaningful activity classification validation against manual review"
    - "Configuration system testing across different project types"

related_intents:
  parent_feature: "accurate_date_tracking_system"
  sibling_stories:
    - "real_time_work_timestamp_capture"
    - "dual_layer_date_system_implementation"
    - "velocity_measurement_and_analytics"
  
next_actions:
  immediate: "Design stagnation detection algorithms and configurable threshold system"
  implementation: "Implement meaningful activity classification and age calculation utilities"
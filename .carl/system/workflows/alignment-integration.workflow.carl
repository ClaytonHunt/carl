# Alignment Integration Workflow
# Defines how alignment validation integrates with CARL commands

workflow_name: "alignment_integration"
version: "1.0.0"
created_date: "2025-07-30T15:30:00-04:00"

# Command Integration Points
command_integrations:
  carl_plan:
    trigger: "After requirements gathering, before analyst invocation"
    integration_point: "carl_compile_complete_context()"
    validation_steps:
      - "Load project vision file (.carl/project/vision.carl)"
      - "Extract alignment criteria and weights"
      - "Score feature request against alignment criteria"
      - "Generate alignment reasoning breakdown"
      - "Check for potential strategic pivot indicators"
      - "Include alignment context in analyst prompt"
    performance_target: "< 100ms additional latency"
    
  carl_task:
    trigger: "Before task execution, during CARL context loading"
    integration_point: "carl_validate_feature_alignment()"
    validation_steps:
      - "Identify if task involves feature development"
      - "Load relevant intent files for alignment context"
      - "Validate task alignment against project vision"
      - "Generate alignment score and reasoning"
      - "Flag alignment concerns or pivot indicators"
      - "Include alignment guidance in task context"
    performance_target: "< 50ms additional latency"
    
  carl_analyze:
    trigger: "During codebase analysis, after feature discovery"
    integration_point: "Alignment Analysis phase"
    validation_steps:
      - "Scan all discovered features against project vision"
      - "Generate comprehensive alignment report"
      - "Identify misaligned implemented features"
      - "Flag potential strategic pivot areas"
      - "Recommend feature prioritization based on alignment"
      - "Update alignment metrics in analysis report"
    performance_target: "< 2s for full project analysis"

# Context Injection Points
context_injection:
  user_prompt_submit_hook:
    triggers:
      - "Prompts containing: feature, implement, create, build, add"
      - "Commands: /carl:plan, /carl:task"
      - "Feature-related discussions"
    context_provided:
      - "Project alignment criteria with weights"
      - "Alignment validation system notice"
      - "Pivot detection capability notice"
      - "Strategic alignment guidance"
    
  strategic_context_function:
    integration_method: "carl_get_alignment_validation_context()"
    context_depth:
      - "Light: Basic alignment awareness"
      - "Medium: Alignment criteria summary"
      - "Deep: Full alignment framework context"

# Automatic Validation Workflows
automatic_workflows:
  feature_alignment_validation:
    trigger: "New feature intent creation"
    workflow:
      - "Extract feature description and requirements"
      - "Load project vision alignment criteria"
      - "Calculate weighted alignment score"
      - "Generate detailed reasoning breakdown"
      - "Check pivot detection thresholds"
      - "Return validation results with recommendations"
    
  batch_alignment_analysis:
    trigger: "Multiple feature analysis requests"
    workflow:
      - "Load and cache project vision data"
      - "Process features in batch for efficiency"
      - "Generate comparative alignment scores"
      - "Identify alignment patterns and outliers"
      - "Provide batch validation report"
    
  pivot_detection_workflow:
    trigger: "Alignment score below threshold or unusual patterns"
    workflow:
      - "Analyze alignment score distribution"
      - "Check for strategic coherence indicators"
      - "Evaluate business value alignment"
      - "Assess technical architecture compatibility"
      - "Generate pivot vs misalignment classification"
      - "Recommend stakeholder review if pivot detected"

# Performance Optimization
caching_strategy:
  vision_file_cache:
    method: "File modification time-based caching"
    location: "/tmp/carl_vision_cache_[project]_[mtime].json"
    invalidation: "On project vision file modification"
    
  alignment_computation_cache:
    method: "Feature content fingerprinting"
    location: "/tmp/carl_alignment_cache_[fingerprint].json"
    invalidation: "On feature intent file changes"
    
  batch_processing_optimization:
    method: "Shared vision data loading"
    technique: "Single vision file parse for multiple validations"
    performance_target: "Sub-linear scaling with feature count"

# Error Handling
error_scenarios:
  missing_vision_file:
    behavior: "Graceful degradation - skip alignment validation"
    user_feedback: "None (silent operation)"
    
  invalid_vision_format:
    behavior: "Log warning, continue without alignment validation"
    user_feedback: "Optional notice about vision file format issues"
    
  alignment_computation_error:
    behavior: "Fall back to basic alignment awareness context"
    user_feedback: "Alignment validation temporarily unavailable"
    
  performance_timeout:
    behavior: "Skip alignment validation after timeout threshold"
    user_feedback: "None (maintain command responsiveness)"

# Integration Testing
test_scenarios:
  command_integration_tests:
    - "carl:plan with alignment validation enabled"
    - "carl:task with feature development alignment checking"
    - "carl:analyze with comprehensive alignment analysis"
    
  context_injection_tests:
    - "Feature-related prompts trigger alignment context"
    - "Non-feature prompts skip alignment context"
    - "Alignment context properly formatted and informative"
    
  performance_tests:
    - "Alignment validation meets latency targets"
    - "Batch processing scales efficiently"
    - "Caching reduces repeated computation overhead"
    
  error_handling_tests:
    - "Missing vision file handled gracefully"
    - "Invalid vision format doesn't break commands"
    - "Performance timeouts maintain system responsiveness"

# Rollback Strategy
rollback_plan:
  disable_integration:
    method: "Environment variable CARL_ALIGNMENT_DISABLED=true"
    scope: "Disables all alignment validation integration"
    
  command_level_disable:
    method: "Individual command flags --no-alignment"
    scope: "Per-command alignment validation bypass"
    
  performance_circuit_breaker:
    method: "Automatic disable on performance threshold breach"
    scope: "Temporary disable with automatic re-enable attempts"

# Success Metrics
success_criteria:
  functionality:
    - "Alignment validation integrated in all target commands"
    - "Context injection working for feature-related prompts"
    - "Pivot detection operational with accurate classification"
    
  performance:
    - "< 100ms latency increase for planning commands"
    - "< 50ms latency increase for task commands"
    - "< 2s latency for full project alignment analysis"
    
  reliability:
    - "Graceful handling of all error scenarios"
    - "No command failures due to alignment integration"
    - "Consistent alignment validation results"
    
  user_experience:
    - "Seamless integration with minimal workflow disruption"
    - "Helpful alignment guidance without being intrusive"
    - "Clear pivot detection warnings when appropriate"